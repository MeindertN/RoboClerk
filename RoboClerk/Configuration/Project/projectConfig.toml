# This configuration file contains the configuration for the project that RoboClerk
# is running on. It also contains key value pairs for items that are needed in the 
# documentation such as the name of the software and the version etc.
# Any values between {} are values that are replaced during the build process to 
# facilitate debugging. If you are using a copy of this config file for your own 
# setup, just make sure to replace all these with valid values for your install.

# Directory where all template files are located 

TemplateDirectory = "{DOCUMENTATIONROOT}RoboClerk_input/"

# Root of the development project

ProjectRoot = "{PROJECTROOT}"

# Directory where all media files (images etc.) are located. This will be copied to the output directory so the documents
# can be built. Leave empty if no images are needed.

MediaDirectory = "{DOCUMENTATIONROOT}RoboClerk_input/media"

# Truth items are those items retrieved from the source of truth (e.g. the SLMS). Specify how the these truth trace entities
# should be called. This will ensure that the trace output makes sense in your context. The way these are defined here are 
# as follows:
# [Truth.<TRACE ID>]
#	name = <HOW THE TRUTH ITEM IS KNOWN IN THIS PROJECT>
#	abbreviation = <THE ABBREVIATION OF THE TRUTH ITEM>
#	itemTemplate = <THE FILEPATH OF THE ITEM TEMPLATE, RELATIVE TO THE TEMPLATE DIRECTORY>
# Note that the <TRACE ID> elements cannot be changed by the user and that all truth entities must be present in this file.

[Truth.SystemRequirement]
	name = "System Requirement"
	abbreviation = "SYS"

[Truth.SoftwareRequirement]
	name = "Software Requirement"
	abbreviation = "SWR"

[Truth.DocumentationRequirement]
	name = "Documentation"
	abbreviation = "DOC"

[Truth.SoftwareSystemTest]
	name = "Test Case"
	abbreviation = "TC"

[Truth.UnitTest]
	name = "Unit Test"
	abbreviation = "UT"

[Truth.Risk]
	name = "Risk"
	abbreviation = "RSK"

[Truth.Anomaly]
	name = "Bug"
	abbreviation = "BG"

[Truth.SOUP]
	name = "SOUP"
	abbreviation = "SOUP"

[Truth.DocContent]
	name = "DocContent"
	abbreviation = "DCT"

# Document specification, a specification should be created for each document that RoboClerk should know about. This 
# can include documents that can be referenced but are not maintained or generated by RoboClerk. 
# The document specification needs to have a RoboClerk identifier (i.e. RCIDENTIFIER), a title, an abbreviation, an
# organizational identifier (i.e. IDENTIFIER) and a file location (can be empty or omitted for documents not managed 
# by RoboClerk).
# Optionally, you can specify post processing steps as commandline commands that RoboClerk will execute in order after it 
# has produced the AsciiDoc versions of the documents. Each document should be specified below in the following format:
#
#	[Document.<RCIDENTIFIER>]
#		title = "<TITLE OF THE DOCUMENT>"
#		abbreviation = "<ABBREVIATION>"
#		identifier = "<IDENTIFIER>"
#		template = "<TEMPLATE FILE LOCATION>"
#		[[Document.<RCIDENTIFIER>.Command]]
#			executable = "<PATH_TO_EXECUTABLE>"
#			arguments = "<ARGUMENTS>"
#			workingDirectory = "<WORKING_DIRECTORY>"
#			ignoreErrors = "False"
#		[[Document.<RCIDENTIFIER>.Command]]
#			executable = "<PATH_TO_EXECUTABLE>"
#			arguments = "<ARGUMENTS>"
#			workingDirectory = "<WORKING_DIRECTORY>"
#			ignoreErrors = "False"
#
# RoboClerk will check the command exit code. If the exit code indicates an error, RoboClerk throws an exception and stops  
# processing. To ignore exit codes set ignoreErrors = "True". In the commands one can use a number of variables to assist
# in calling the commands. These are:
# %INPUTDIR% the template file directory
# %OUTPUTFILE% is the full filename as in the template parameter
# %OUTPUTFILENOEXT% is the full filename without extension
# %OUTPUTDIR% is the directory where output files are written (defined in the general config file)
# %DATE% is the current date yyyyMMdd
# %DATETIME% is the current date and time yyyyMMddHHmm
# RoboClerk will assign these variables the correct values before processing the command.

{POSTBUILDPROCESS}

# Below are documents that RoboClerk needs to know about but that it does not manage
[Document.RandomTestDocument]
	title = "Random Test Document"
	abbreviation = "RTD"
	identifier = "DOC00A"


# Use the trace config to configure what documents shall be traced and what in those documents must trace.
# In the table below, each table represents a trace. Trace entities and documents are listed in the order in which
# they will be traced. Each of them is assigned a list indicating how the trace should be validated and what
# requirements should trace to the target doc. It is possible to indicate that only a subset of requirements
# (based on the category of the requirements) must trace. Multiple categories can be indicated. To indicate
# that the trace should be complete (all requirements must trace to the target) use the ALL keyword. To 
# indicate that incomplete trace is allowed, use the OPTIONAL keyword. 
# For example, to trace from a System Requirement to the SystemRequirementsSpecification document and to the
# SoftwareRequirement add the following table below:
# [TraceConfig.SystemRequirement]
#		SystemRequirementsSpecification.forward = ["ALL"]    # all System Requirements must trace to the SystemRequirementSpecification document 
#		SystemRequirementsSpecification.backward = ["ALL"]   # all System Requirements in the SystemRequirementSpecification must trace back to at least one SystemRequirement (i.e. no extras) 
#		SystemRequirementsSpecification.forwardLink = "DOC"  # the link type is DOC, because this is a document
#		SystemRequirementsSpecification.backwardLink = "DOC" # the link type is DOC, because this is a document
#
#		SoftwareRequirement.forward = ["ALL"]     # all System Requirements must trace to at least one Software Requirement
#		SoftwareRequirement.backward = ["ALL"]    # all Software Requirements must trace back to at least one System Requirement. If orphans are allowed, change ALL to OPTIONAL
#		SoftwareRequirement.forwardLink = "Child" # the relationship type from the System Requiremnt to the Software Requirement is "child"
#		SoftwareRequirement.backwardLink = "Parent" # the relationship type from the Software Requirement back to the System Requirement is "parent"

[TraceConfig]
	
	[TraceConfig.SystemRequirement]
		SystemRequirementsSpecification.forward = ["ALL"]
		SystemRequirementsSpecification.backward = ["ALL"]
		SystemRequirementsSpecification.forwardLink = "DOC"
		SystemRequirementsSpecification.backwardLink = "DOC"

		SoftwareRequirement.forward = ["ALL"]
		SoftwareRequirement.backward = ["ALL"]
		SoftwareRequirement.forwardLink = "Child"
		SoftwareRequirement.backwardLink = "Parent"

		RiskAssessmentRecord.forward = ["Risk Control Measure"]
		RiskAssessmentRecord.backward = ["OPTIONAL"]
		RiskAssessmentRecord.forwardLink = "DOC"
		RiskAssessmentRecord.backwardLink = "DOC"

		Risk.forward = ["Risk Control Measure"]
		Risk.backward = ["OPTIONAL"]
		Risk.forwardLink = "Related"
		Risk.backwardLink = "RiskControl"

	[TraceConfig.SoftwareRequirement]
		SoftwareRequirementsSpecification.forward = ["ALL"]
		SoftwareRequirementsSpecification.backward = ["ALL"]
		SoftwareRequirementsSpecification.forwardLink = "DOC"
		SoftwareRequirementsSpecification.backwardLink = "DOC"

		SystemRequirement.forward = ["ALL"]
		SystemRequirement.backward = ["ALL"]
		SystemRequirement.forwardLink = "Parent"
		SystemRequirement.backwardLink = "Child"

		SoftwareSystemLevelTestPlan.forward = ["ALL"]
		SoftwareSystemLevelTestPlan.backward = ["OPTIONAL"]
		SoftwareSystemLevelTestPlan.forwardLink = "DOC"
		SoftwareSystemLevelTestPlan.backwardLink = "DOC"
	
	[TraceConfig.Risk]
		SystemRequirement.forward = ["ALL"]
		SystemRequirement.backward = ["OPTIONAL"]
		SystemRequirement.forwardLink = "Related"
		SystemRequirement.backwardLink = "Related"

	[TraceConfig.DocContent]
		DocumentationRequirement.forward = ["ALL"]
		DocumentationRequirement.backward = ["ALL"]
		DocumentationRequirement.forwardLink = "Parent"
		DocumentationRequirement.backwardLink = "Child"

		SoftwareDesignSpecification.forward = ["OPTIONAL"]
		SoftwareDesignSpecification.backward = ["OPTIONAL"]
		SoftwareDesignSpecification.forwardLink = "DOC"
		SoftwareDesignSpecification.backwardLink = "DOC"
		
		TraceAbilityAnalysisRecord.forward = ["OPTIONAL"]
		TraceAbilityAnalysisRecord.backward = ["OPTIONAL"]
		TraceAbilityAnalysisRecord.forwardLink = "DOC"
		TraceAbilityAnalysisRecord.backwardLink = "DOC"

	[TraceConfig.DocumentationRequirement]
		DocContent.forward = ["ALL"]
		DocContent.backward = ["ALL"]
		DocContent.forwardLink = "Child"
		DocContent.backwardLink = "Parent"

# The following element can be used to take a snapshot as produced in a RoboClerk build
# and rebuild the documentation without the use of any external datasources. It can also
# be used to make small additions and changes to accomodate patches and bug fixes that 
# impact the documentation. Users can indicate what new truth items to pull from external
# sources like the SLMS.

[CheckpointConfiguration]

# To use a checkpoint, indicate its fileName (without path). It must be located in the 
# template dir. If the checkpoint filename is an empty string, assume there is no checkpoint
# file

CheckpointFile = ""

# For the following items, enter any IDs you want RoboClerk to pull from the normal
# data sources. Could be new or updated. If the ID already exists in the checkPoint
# (e.g. in case of an updated item) only the externally retrieved item is used. 
# IDs in RoboClerk are strings.

UpdatedSystemRequirementIDs = []

UpdatedSoftwareRequirementIDs = []

UpdatedSoftwareSystemTestIDs = []
	
UpdatedUnitTestIDs = []
	
UpdatedRiskIDs = []

UpdatedAnomalyIDs = []

UpdatedSOUPIDs = []

UpdatedDocumentationRequirementIDs = []

UpdatedDocContentIDs = []

[ConfigValues]

CompanyName = "Acme Inc."
SoftwareName = "RoboClerk"
SoftwareVersion = "0.1"
ProjectIdentifier = "007"
