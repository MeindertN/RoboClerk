# This configuration file contains the configuration for the project that RoboClerk
# is running on. It also contains key value pairs for items that are needed in the 
# documentation such as the name of the software and the version etc.

# Directory where all template files are located 

TemplateDirectory = "I:/temp/roboclerk_input/"

# Root of the development project

ProjectRoot = ""

# Directory where all media files (images etc.) are located. This will be copied to the output directory so the documents
# can be built. Leave empty if no images are needed.

MediaDirectory = "I:/temp/Roboclerk_input/media"

# Truth items are those items retrieved from the source of truth (e.g. the SLMS). Specify how the these truth trace entities
# should be called. This will ensure that the trace output makes sense in your context. The way these are defined here are 
# as follows:
# [Truth.<TRACE ID>]
#	name = <HOW THE TRUTH ITEM IS KNOWN IN THIS PROJECT>
#	abbreviation = <THE ABBREVIATION OF THE TRUTH ITEM>
# Note that the <TRACE ID> elements cannot be changed by the user and that all truth entities must be present in this file.

[Truth.SystemRequirement]
	name = "Requirement"
	abbreviation = "SYS"

[Truth.SoftwareRequirement]
	name = "Specification"
	abbreviation = "SWR"

[Truth.SoftwareSystemTest]
	name = "Test Case"
	abbreviation = "TC"

[Truth.SoftwareUnitTest]
	name = "Unit Test"
	abbreviation = "UT"

[Truth.Risk]
	name = "Risk"
	abbreviation = "RSK"

[Truth.Anomaly]
	name = "Bug"
	abbreviation = "BG"

[Truth.SOUP]
	name = "SOUP"
	abbreviation = "SOUP"

# Document specification, a specification should be created for each document that RoboClerk should know about. This 
# can include documents that can be referenced but are not maintained or generated by RoboClerk. 
# The document specification needs to have a RoboClerk identifier (i.e. RCIDENTIFIER), a title, an abbreviation, an
# organizational identifier (i.e. IDENTIFIER) and a file location (can be empty or omitted for documents not managed 
# by RoboClerk).
# Optionally, you can specify post processing steps as commandline commands that RoboClerk will execute in order after it 
# has produced the AsciiDoc versions of the documents. Each document should be specified below in the following format:
#
#	[Document.<RCIDENTIFIER>]
#		title = "<TITLE OF THE DOCUMENT>"
#		abbreviation = "<ABBREVIATION>"
#		identifier = "<IDENTIFIER>"
#		template = "<TEMPLATE FILE LOCATION>"
#		[[Document.<RCIDENTIFIER>.Command]]
#			executable = "<PATH_TO_EXECUTABLE>"
#			arguments = "<ARGUMENTS>"
#			workingDirectory = "<WORKING_DIRECTORY>"
#			ignoreErrors = "False"
#		[[Document.<RCIDENTIFIER>.Command]]
#			executable = "<PATH_TO_EXECUTABLE>"
#			arguments = "<ARGUMENTS>"
#			workingDirectory = "<WORKING_DIRECTORY>"
#			ignoreErrors = "False"
#
# RoboClerk will check the command exit code. If the exit code indicates an error, RoboClerk throws an exception and stops  
# processing. To ignore exit codes set ignoreErrors = "True". In the commands one can use a number of variables to assist
# in calling the commands. These are:
# %INPUTDIR% the template file directory
# %OUTPUTFILE% is the full filename as in the template parameter
# %OUTPUTFILENOEXT% is the full filename without extension
# %OUTPUTDIR% is the directory where output files are written (defined in the general config file)
# %DATE% is the current date yyyyMMdd
# %DATETIME% is the current date and time yyyyMMddHHmm
# RoboClerk will assign these variables the correct values before processing the command.

[Document.SystemRequirementsSpecification]
	title = "System Requirements Specification"
	abbreviation = "PRS"
	identifier = "DOC001"
	template = "SystemRequirementSpecification.adoc"
	[[Document.SystemRequirementsSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SystemRequirementsSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.SoftwareRequirementsSpecification]
	title = "Software Requirements Specification"
	abbreviation = "SRS"
	identifier = "DOC002"
	template = "SoftwareRequirementSpecification.adoc"
	[[Document.SoftwareRequirementsSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareRequirementsSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.SoftwareDevelopmentPlan]
	title = "Software Design and Development Plan"
	abbreviation = "SDDP"
	identifier = "DOC003"
	template = "SoftwareDesignAndDevelopmentPlan.adoc"
	[[Document.SoftwareDevelopmentPlan.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareDevelopmentPlan.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.SoftwareDesignSpecification]
	title = "Software Design Specification"
	abbreviation = "SDS"
	identifier = "DOC003"
	template  = "SoftwareDesignSpecification.adoc"
	[[Document.SoftwareDesignSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareDesignSpecification.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.RiskAssessmentRecord]
	title = "Risk Assessment Record"
	abbreviation = "RAR"
	identifier = "DOC004"
	template  = "RiskAssessmentRecord.adoc"
	[[Document.RiskAssessmentRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.RiskAssessmentRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.SoftwareSystemLevelTestPlan]
	title = "System Level Test Plan"
	abbreviation = "SLTP"
	identifier = "DOC005"
	template = "SystemLevelTestPlan.adoc"
	[[Document.SoftwareSystemLevelTestPlan.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareSystemLevelTestPlan.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareSystemLevelTestPlan.Command]]
		executable = "I:/Users/meind/WPy64-3950/python-3.9.5.amd64/python.exe"
		arguments = "I:/code/RoboClerk/DocxProcessingScripts/SystemLevelTestPlan.py %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.SoftwareSystemLevelTestPlan.Command]]
		executable = "I:/Users/meind/WPy64-3950/python-3.9.5.amd64/python.exe"
		arguments = "I:/code/RoboClerk/DocxProcessingScripts/GeneralDocxPostProc.py %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"
	

[Document.ResidualAnomaliesRecord]
	title = "Unresolved Anomalies List"
	abbreviation = "UAL"
	identifier = "DOC006"
	template = "ResidualAnomaliesRecord.adoc"
	[[Document.ResidualAnomaliesRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.ResidualAnomaliesRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

[Document.TraceAbilityAnalysisRecord]
	title = "Traceability Analysis Record"
	abbreviation = "TAR"
	identifier = "DOC007"
	template = "TraceabilityAnalysisRecord.adoc"
	[[Document.TraceAbilityAnalysisRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk asciidoctor -r asciidoctor-kroki /mnt/Roboclerk_output/%OUTPUTFILE% --backend docbook"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.TraceAbilityAnalysisRecord.Command]]
		executable = "docker"
		arguments = "run -a stdout -a stderr -v \"I:/Temp/\":/mnt --rm roboclerk pandoc --from docbook -s /mnt/Roboclerk_output/%OUTPUTFILENOEXT%.xml --reference-doc=/mnt/Roboclerk_input/DocxProcessingScripts/General_DOCX_template.docx -o /mnt/Roboclerk_output/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"
	[[Document.TraceAbilityAnalysisRecord.Command]]
		executable = "I:/Users/meind/WPy64-3950/python-3.9.5.amd64/python.exe"
		arguments = "I:/code/RoboClerk/DocxProcessingScripts/GeneralDocxPostProc.py %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx %OUTPUTDIR%/%OUTPUTFILENOEXT%-%DATE%.docx"
		workingDirectory = ""
		ignoreErrors = "False"

# Below are documents that RoboClerk needs to know about but that it does not manage
[Document.RandomTestDocument]
	title = "Random Test Document"
	abbreviation = "RTD"
	identifier = "DOC00A"


# Use the trace config to configure what documents shall be traced and what in those documents must trace.
# Two levels of requirements are distinguished, product and software requirements. In the table below, both
# these levels are represented as tables. In each table all trace documents are listed in the order in which
# they will be traced. Each of them is assigned a list indicating how the trace should be validated and what
# requirements should trace to the target doc. It is possible to indicate that only a subset of requirements
# (based on the category of the requirements) must trace. Multiple categories can be indicated. To indicate
# that the trace should be complete (all requirements must trace to the target) use the ALL keyword. To 
# indicate that incomplete trace is allowed, use the OPTIONAL keyword. 

[TraceConfig]
	
	[TraceConfig.SystemRequirement]
		SystemRequirementsSpecification.forward = ["ALL"]
		SystemRequirementsSpecification.backward = ["ALL"]
		SystemRequirementsSpecification.forwardLink = "DOC"
		SystemRequirementsSpecification.backwardLink = "DOC"

		SoftwareRequirement.forward = ["ALL"]
		SoftwareRequirement.backward = ["ALL"]
		SoftwareRequirement.forwardLink = "Child"
		SoftwareRequirement.backwardLink = "Parent"

		RiskAssessmentRecord.forward = ["Risk Control Measure"]
		RiskAssessmentRecord.backward = ["Risk Control Requirement"]
		RiskAssessmentRecord.forwardLink = "DOC"
		RiskAssessmentRecord.backwardLink = "DOC"

		#Risk.forward = ["Risk Control Measure"]
		#Risk.backward = ["Risk Control Requirement"]
		#Risk.forwardLink = "Parent"
		#Risk.backwardLink = "Child"

	[TraceConfig.SoftwareRequirement]
		SoftwareRequirementsSpecification.forward = ["ALL"]
		SoftwareRequirementsSpecification.backward = ["ALL"]
		SoftwareRequirementsSpecification.forwardLink = "DOC"
		SoftwareRequirementsSpecification.backwardLink = "DOC"

		SystemRequirement.forward = ["ALL"]
		SystemRequirement.backward = ["ALL"]
		SystemRequirement.forwardLink = "Parent"
		SystemRequirement.backwardLink = "Child"

		RiskAssessmentRecord.forward = ["Risk Control Measure"]
		RiskAssessmentRecord.backward = ["Risk Control Specification"]
		RiskAssessmentRecord.forwardLink = "DOC"
		RiskAssessmentRecord.backwardLink = "DOC"

		SoftwareSystemLevelTestPlan.forward = ["ALL"]
		SoftwareSystemLevelTestPlan.backward = ["ALL"]
		SoftwareSystemLevelTestPlan.forwardLink = "DOC"
		SoftwareSystemLevelTestPlan.backwardLink = "DOC"

[ConfigValues]

CompanyName = "Acme Inc."
SoftwareName = "RoboClerk"
SoftwareVersion = "0.1"
ProjectIdentifier = "007"
